#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <HTTPClient.h>
#include <LiquidCrystal_I2C.h>

#define DHTPIN 12  
#define DHTTYPE DHT22
#define I2C_ADDR    0x27
#define LCD_COLUMNS 20
#define LCD_LINES   4
#define sensor1 26
#define sensor2 25
DHT dht(DHTPIN, DHTTYPE);

const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopic = "temperaturaHUmidade";
String serverName = "https://api.thingspeak.com/update?api_key=8TQVQJ5RP18XBWLZ&field1=0";

WiFiClient wifiClient;
PubSubClient mqttClient(mqttServer, mqttPort, wifiClient);
HTTPClient httpClient;

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLUMNS, LCD_LINES);

void setup() {
  Serial.begin(115200);
  
  dht.begin();
  pinMode(sensor1, OUTPUT);
  pinMode(sensor2, OUTPUT);
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando na rede WiFi...");
  }
  Serial.println("Conectado!");
  
  lcd.init();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("Temp.: 0" + String(char(223)) + "C");
  lcd.setCursor(0, 1);
  lcd.print("Umidade: 0%");
  lcd.setCursor(0,3);
  lcd.print("LED 1 [ ]  LED 2 [ ]");

  mqttClient.setCallback(callback);
  connectToMqtt();
}

void loop() {
  if (!mqttClient.connected()) {
    connectToMqtt();
  }
  
  mqttClient.loop();
  
  float hum = dht.readHumidity();
  float temp = dht.readTemperature();

  if (isnan(hum) || isnan(temp)) {
    Serial.println("Leitura n찾o identificada!");
    return;
  }
  
  Serial.print("Umidade: ");
  Serial.print(hum);
  Serial.print("%\t");
  Serial.print("Temperatura: ");
  Serial.print(temp);
  Serial.println("째C");
  
  httpClient.begin(serverName);
  httpClient.addHeader("Content-Type", "application/x-www-form-urlencoded");
  String payload = "field1=" + String(temp) + "&field2=" + String(hum);
  int httpResponseCode = httpClient.POST(payload);
  httpClient.end();
  
  if (httpResponseCode == 200) {
    Serial.println("Dados enviados com sucesso via HTTP!");
  } else {
    Serial.print("Erro ao enviar dados via HTTP. C처digo de resposta: ");
    Serial.println(httpResponseCode);
  }
  
  String mqttPayload = "{\"temperatura\":" + String(temp) +"," +
              "\"umidade\":" + String(hum) + "}";
  mqttClient.publish(mqttTopic, mqttPayload.c_str());
  
  lcd.setCursor(0, 0);
  lcd.print("Temp: " + String(temp) + String(char(223)) + "C ");
  lcd.setCursor(0, 1);
  lcd.print("Umidade: " + String(hum) + "%   ");

  if (temp > 35 && hum > 70) {
    lcd.setCursor(0,3);
    lcd.print("LED 1 [*]  LED 2 [*]");
    digitalWrite(sensor1, HIGH);
    digitalWrite(sensor2, HIGH);
  } else if (hum > 70) {
      lcd.setCursor(0,3);
      lcd.print("LED 1 [ ]  LED 2 [*]");
      digitalWrite(sensor1, LOW);
      digitalWrite(sensor2, HIGH);
  } else if (temp > 35) {
      lcd.setCursor(0,3);
      lcd.print("LED 1 [*]  LED 2 [ ]");
      digitalWrite(sensor1, HIGH);
      digitalWrite(sensor2, LOW);
  } else {
    lcd.setCursor(0,3);
    lcd.print("LED 1 [ ]  LED 2 [ ]");
    digitalWrite(sensor1, LOW);
    digitalWrite(sensor2, LOW);
  }
  
  delay(5000);
}

void connectToMqtt() {
  while (!mqttClient.connected()) {
    Serial.println("Conectando ao broker MQTT...");
    
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("Conectado ao broker MQTT!");
      mqttClient.subscribe(mqttTopic);
    } else {
      Serial.print("Falha na conex찾o ao broker MQTT. Estado: ");
      Serial.print(mqttClient.state());
      Serial.println(" Retentando em 5 segundos...");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Mensagem recebida:");
  Serial.write(payload, length);
  Serial.println();
}